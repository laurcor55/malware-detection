import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import precision_score, recall_score

def load_data():
  df = pd.read_csv('Malware_detection_data.csv')
  df = df.astype(bool)
  return df

def tri_split(df):

  df_train_val, df_test = train_test_split(df, test_size=0.1, random_state=12, shuffle=True)
  df_train, df_val = train_test_split(df_train_val, test_size=0.2, random_state=12, shuffle=True)
  return df_train, df_test, df_val


def evaluate_model(model, X_val, y_val, threshold=0.5):

  y_val_predict = model.predict_proba(X_val)
  y_val_predict_prob = y_val_predict[:, 1] > threshold

  precision = precision_score(y_val, y_val_predict_prob)
  recall = recall_score(y_val, y_val_predict_prob)
  print('precision: ' + str(precision))
  print('recall: ' + str(recall))

  return precision, recall

def get_top_features(clf, permissions):
  model = SelectFromModel(clf, prefit=True)
  top_features = permissions[model.get_support()]
  return top_features


def get_permission_counts(df):
  permissions = df.columns.values[:-1]

  true_permission_count = []
  malware_true_permission_count = []
  malware_false_permission_count = []
  safe_software_true_permission_count = []
  safe_software_false_permission_count = []


  for permission in permissions: 
    true_permission_count.append((df[permission]==True).sum())
    malware_true_permission_count.append(((df[permission]==True) & (df['Result']==True)).sum())
    malware_false_permission_count.append(((df[permission]==False) & (df['Result']==True)).sum())
    safe_software_true_permission_count.append(((df[permission]==True) & (df['Result']==False)).sum())
    safe_software_false_permission_count.append(((df[permission]==False) & (df['Result']==False)).sum())

  df_permission_counts = pd.DataFrame({'permission': permissions, 'true_permission_count': true_permission_count, 'malware_true_permission_count': malware_true_permission_count, 'malware_false_permission_count': malware_false_permission_count, 'safe_software_true_permission_count': safe_software_true_permission_count, 'safe_software_false_permission_count': safe_software_false_permission_count})

  df_permission_counts['increase_true_count'] = df_permission_counts['malware_true_permission_count'] -df_permission_counts['safe_software_true_permission_count'] 

  return df_permission_counts
