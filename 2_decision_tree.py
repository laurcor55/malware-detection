import pandas as pd
import numpy as np
import malware_detection_lib as lib

from sklearn.model_selection import GridSearchCV
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score, recall_score, f1_score

print('________________')
print('Loading Data')

df = lib.load_data()
df_train, df_test, df_val = lib.tri_split(df)
permissions = df.columns.values[:-1]

df_permission_counts = lib.get_permission_counts(df_train)
permissions_ranked = df_permission_counts.sort_values('true_permission_count', ascending=False)['permission'].to_list()

print('________________')
print('Feature Space Optimization')

y_train = df_train['Result']
y_val = df_val['Result']
y_test = df_test['Result']

n_permissions = []
recalls = []
precisions = []
f1_scores = []

for ii in range(2, len(permissions_ranked)):
  permissions_used = permissions_ranked[:ii]
  X_train = df_train[permissions_used]
  X_val = df_val[permissions_used]
  X_test = df_test[permissions_used]

  clf = DecisionTreeClassifier(random_state=0, max_depth=16, criterion='entropy')
  clf.fit(X_train, y_train)

  y_val_predict = clf.predict(X_val)

  precision = precision_score(y_val, y_val_predict)
  recall = recall_score(y_val, y_val_predict)
  f1 = f1_score(y_val, y_val_predict)

  n_permissions.append(len(permissions_used))
  precisions.append(precision)
  recalls.append(recall)
  f1_scores.append(f1)

df_summary = pd.DataFrame({'n_permissions':n_permissions, 'precision': precisions, 'recall': recalls, 'f1': f1_scores})

plt.figure(figsize=(4, 3))
sns.scatterplot(df_summary, x='n_permissions', y='f1')
plt.ylim([0.75, 1])
plt.xlim([4, 60])
plt.xlabel('N features')
plt.ylabel('F1 score')
ax = plt.gca()
ax.grid()
plt.show()

print('________________')
print('Hyperparameter Space Optimization')

permissions_used = permissions_ranked[:30]
X_train = df_train[permissions_used]
X_val = df_val[permissions_used]
X_test = df_test[permissions_used]

criterion = ['gini', 'entropy']
max_depth = np.arange(20, 30, 2)

parameters = dict(max_depth=max_depth, criterion=criterion)

clf_gs = GridSearchCV(clf, parameters, scoring='f1')
clf_gs.fit(X_train, y_train)

print('Best Criterion:', clf_gs.best_estimator_.get_params()['criterion'])
print('Best max_depth:', clf_gs.best_estimator_.get_params()['max_depth'])
df_gs = pd.DataFrame(clf_gs.cv_results_)

sns.scatterplot(df_gs, x='param_max_depth', y='split0_test_score', hue='param_criterion')
plt.xlabel('Max depth')
plt.ylabel('F1 score')
plt.show()

print('________________')
print('Evaluate Model')

clf = DecisionTreeClassifier(random_state=0, max_depth=24, criterion='gini')
permissions_best = permissions_ranked[:30]
X_train = df_train[permissions_best]
y_train = df_train['Result']

X_val = df_val[permissions_best]
y_val = df_val['Result']

X_test = df_test[permissions_best]
y_test = df_test['Result']

clf.fit(X_train, y_train)
print('Training Data')
precision, recall = lib.evaluate_model(clf, X_train, y_train)
plt.show()
print('Validation Data')
precision, recall = lib.evaluate_model(clf, X_val, y_val)
plt.show()
print('Test Data')
precision, recall = lib.evaluate_model(clf, X_test, y_test)
plt.show()